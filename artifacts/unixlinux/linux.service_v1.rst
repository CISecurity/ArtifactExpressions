Linux: Service
==============

Description
-----------

The Linux: Service test retrieves information about systemd units in the
form of properties. For more information see the output generated by
systemctl show $unit. The test references the required
systemdunitproperty_object and the state element specifies the
information to check.

Technical Details
-----------------

Artifact Parameters
~~~~~~~~~~~~~~~~~~~

Human ID:
   -  linux.service_v1

======= ====== =====================================
Name    Type   Description
======= ====== =====================================
service string The name of the service to be tested.
======= ====== =====================================

Supported Test Types
~~~~~~~~~~~~~~~~~~~~

-  Unix: Service Enabled

Test Type Parameters
~~~~~~~~~~~~~~~~~~~~

Human ID:
   -  unix.service_enabled_v1

======= ====== ================================
Name    Type   Description
======= ====== ================================
enabled string Is the service enabled? (Yes/No)
======= ====== ================================

Generated Content
~~~~~~~~~~~~~~~~~

XCCDF+AE
^^^^^^^^

This is what the AE check looks like, inside a Rule, in the XCCDF

::

   <xccdf:complex-check operator="AND">
     <xccdf:check system="https://benchmarks.cisecurity.org/ae/0.5">
       <xccdf:check-content>
         <ae:artifact_expression id="xccdf_org.cisecurity.benchmarks_ae_[SECTION-NUMBER]">
           <ae:artifact_oval_id>[ARTIFACT-OVAL-ID]</ae:artifact_oval_id>
           <ae:title>[RECOMMENDATION-TITLE]</ae:title>
           <ae:artifact type="[ARTIFACT-TYPE-NAME]">
             <ae:parameters>
               <ae:parameter dt="string" name="service">[service.value]</ae:parameter>
             </ae:parameters>
           </ae:artifact>
           <ae:test type="[TEST-TYPE-NAME]">
             <ae:parameters>
               <ae:parameter dt="string" name="enabled">[enabled.value]</ae:parameter>
             </ae:parameters>
           </ae:test>
           <ae:profiles>
             <ae:profile idref="xccdf_org.cisecurity.benchmarks_profile_Level_1 "/>
           </ae:profiles>          
         </ae:artifact_expression>
       </xccdf:check-content>
     </xccdf:check>
   </xccdf:complex-check>

SCAP
^^^^

XCCDF
'''''

For ``linux.service_v1`` artifacts, the xccdf:check looks like this.
There is no Value element in the XCCDF for this Artifact.

::

   <xccdf:complex-check operator="AND">
     <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
       <check-content-ref
         href="[BENCHMARK-TITLE]"
         name="oval:org.cisecurity.benchmarks.[PLATFORM]:def:[ARTIFACT-OVAL-ID]" />
     </check>
   </xccdf:complex-check>

OVAL
''''

Test

::

   <systemdunitproperty_test 
     xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:tst:[ARTIFACT-OVAL-ID]"
     check_existence="[check_existence.value]"
     check="all"
     comment="[RECOMMENDATION-TITLE]"
     version="1">
     <object object_ref="oval:org.cisecurity.benchmarks.[PLATFORM]:obj:[ARTIFACT-OVAL-ID]" />
     <state state_ref="oval:org.cisecurity.benchmarks.[PLATFORM]:ste:[ARTIFACT-OVAL-ID]" />
   </systemdunitproperty_test>

Object

::

   <systemdunitproperty_object 
     xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:obj:[ARTIFACT-OVAL-ID]"
     comment="[RECOMMENDATION-TITLE]"
     version="1">
     <unit>
       [unit.value]
     </unit>
     <property>
       UnitFileState
     </property>
   </systemdunitproperty_object>

State

::

   <systemdunitproperty_state 
     xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:ste:[ARTIFACT-OVAL-ID]"
     comment="[RECOMMENDATION-TITLE]"
     version="1">
     <value 
       operation="[operation.value]" 
       datatype="string">
       enabled
     </value>
   </systemdunitproperty_state>

YAML
^^^^

::

   artifact-expression:
     artifact-unique-id: "[ARTIFACT-OVAL-ID]"
     artifact-title: "[RECOMMENDATION-TITLE]"
     artifact:
       type:  "[ARTIFACT-TYPE-NAME]"
       parameters:
         - parameter: 
             name: "service"
             dt: "string"
             value:" [service.value]"
     test:
       type: "[TEST-TYPE-NAME]"
       parameters:
         - parameter:
             name: "enabled"
             dt: "string"
             value: "[enabled.value]"

JSON
^^^^

::

   {
     "artifact-expression": {
       "artifact-unique-id": "[ARTIFACT-OVAL-ID]",
       "artifact-title": "[RECOMMENDATION-TITLE]",
       "artifact": {
         "type": "[ARTIFACT-TYPE-NAME]",
         "parameters": [
           {
             "parameter": {
               "name": "service",
               "type": "string",
               "value": "[service.value]"
             }
           }
         ]
       },
       "test": {
         "type": "[TEST-TYPE-NAME]",
         "parameters": [
           {
             "parameter": {
               "name": "enabled",
               "type": "string",
               "value": "[enabled.value]"
             }
           }
         ]
       }
     }
   }
