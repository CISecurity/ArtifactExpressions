Linux: Systemd Unit Property
============================

Description
-----------

The Linux: Systemd Unit Property test is used to retrieve information
about systemd units in form of properties. For more information see the
output generated by systemctl show $unit.

The required systemdunitproperty_object element is used to define the
specific unit and property combination to be evaluated.

The optional systemdunitproperty_state element holds information about
properties of a specific systemd unit.

Technical Details
-----------------

Artifact Parameters
~~~~~~~~~~~~~~~~~~~

Human ID:
   -  linux.systemd_unit_property_v1

+----------+--------+------------------------------------------------+
| Name     | Type   | Description                                    |
+==========+========+================================================+
| property | string | The property of the systemd unit to be tested. |
+----------+--------+------------------------------------------------+
| unit     | string | The full systemd unit name, in the form of     |
|          |        | “$name.$type”. For example “cupsd.service”.    |
|          |        | This name is usually also the filename of the  |
|          |        | unit configuration file located in the         |
|          |        | /etc/systemd/ and /usr/lib/systemd/            |
|          |        | directories.                                   |
+----------+--------+------------------------------------------------+

Supported Test Types
~~~~~~~~~~~~~~~~~~~~

-  Equals
-  Not Equal

Test Type Parameters
~~~~~~~~~~~~~~~~~~~~

Human IDs:
   -  equals
   -  not equal

+-----------+--------+-----------------------------------------------------------+
| Name      | Type   | Description                                               |
+===========+========+===========================================================+
| value     | string | The value of the property associated with a systemd unit. |
+-----------+--------+-----------------------------------------------------------+
| data_type | string | The data type of the value.                               |
+-----------+--------+-----------------------------------------------------------+

NOTE: The ``data_type`` parameter is governed by a constraint allowing only the following values:
   -  boolean
   -  float
   -  int
   -  string
   -  version
   -  set

Generated Content
~~~~~~~~~~~~~~~~~

XCCDF+AE
^^^^^^^^

This is what the AE check looks like, inside a Rule, in the XCCDF

::

   <xccdf:complex-check operator="AND">
     <xccdf:check system="https://benchmarks.cisecurity.org/ae/0.5">
       <xccdf:check-content>
         <ae:artifact_expression id="xccdf_org.cisecurity.benchmarks_ae_[SECTION-NUMBER]">
           <ae:artifact_oval_id>[ARTIFACT-OVAL-ID]</ae:artifact_oval_id>
           <ae:title>[RECOMMENDATION-TITLE]</ae:title>
           <ae:artifact type="[ARTIFACT-TYPE-NAME]">
             <ae:parameters>
               <ae:parameter dt="string" name="unit">[unit.value]</ae:parameter>
               <ae:parameter dt="string" name="property">[property.value]</ae:parameter>
             </ae:parameters>
           </ae:artifact>
           <ae:test type="[TEST-TYPE-NAME]">
             <ae:parameters>
               <ae:parameter dt="string" name="value">[value.value]</ae:parameter>
               <ae:parameter dt="string" name="data_type">[data_type.value]</ae:parameter>
             </ae:parameters>
           </ae:test>
           <ae:profiles>
             <ae:profile idref="xccdf_org.cisecurity.benchmarks_profile_Level_1 "/>
           </ae:profiles>          
         </ae:artifact_expression>
       </xccdf:check-content>
     </xccdf:check>
   </xccdf:complex-check>

SCAP
^^^^

XCCDF
'''''

For ``linux.systemd_unit_property_v1`` artifacts, an XCCDF Value element
is generated.

::

   <Value 
     id="xccdf_org.cisecurity.benchmarks_value_[ARTIFACT-OVAL-ID]_var" 
     type="[type.value]"
     operator="[operator.value]">
     <title>[RECOMMENDATION-TITLE]</title>
     <description>This value is used in Rule: [RECOMMENDATION-TITLE]</description>
     <value>[value.value]</value>
   </Value>

For ``linux.systemd_unit_property_v1`` artifacts, the xccdf:check looks
like this.

::

   <xccdf:complex-check operator="AND">
     <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
       <check-export 
         export-name="oval:org.cisecurity.benchmarks.[PLATFORM]:var:[ARTIFACT-OVAL-ID]" 
         value-id="xccdf_org.cisecurity.benchmarks_value_[ARTIFACT-OVAL-ID]_var" />
       <check-content-ref 
         href="[BENCHMARK-TITLE]" 
         name="oval:org.cisecurity.benchmarks.[PLATFORM]:def:[ARTIFACT-OVAL-ID]" />
     </check>
   </xccdf:complex-check>

OVAL
''''

Test

::

   <systemdunitproperty_test 
     xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:tst:[ARTIFACT-OVAL-ID]"
     check_existence="at_least_one_exists"
     check="all"
     comment="[RECOMMENDATION-TITLE]"
     version="1">
     <object object_ref="oval:org.cisecurity.benchmarks.[PLATFORM]:obj:[ARTIFACT-OVAL-ID]" />
     <state state_ref="oval:org.cisecurity.benchmarks.[PLATFORM]:ste:[ARTIFACT-OVAL-ID]" />
   </systemdunitproperty_test>

Object

::

   <systemdunitproperty_object 
     xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:obj:[ARTIFACT-OVAL-ID]"
     comment="[RECOMMENDATION-TITLE]"
     version="1">
     <unit>
       [unit.value]
     </unit>
     <property>
       [property.value]
     </property>
   </systemdunitproperty_object>

State

::

   <systemdunitproperty_state>
     xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:ste:[ARTIFACT-OVAL-ID]"
     comment="[RECOMMENDATION-TITLE]"
     version="1">
     <value 
       datatype="[datatype.value]" 
       operation="[operation.value]"
       var_ref="oval:org.cisecurity.benchmarks.[PLATFORM]:var:[ARTIFACT-OVAL-ID]" />
   </systemdunitproperty_state>

Variable

::

   <external_variable 
     id="oval:org.cisecurity.benchmarks.[PLATFORM]:var:[ARTIFACT-OVAL-ID]"
     datatype="[datatype.value]" 
     version="1"
     comment="This value is used in Rule: [RECOMMENDATION-TITLE]" />

YAML
^^^^

::

   artifact-expression:
     artifact-unique-id: "[ARTIFACT-OVAL-ID]"
     artifact-title: "[RECOMMENDATION-TITLE]"
     artifact:
       type: "[ARTIFACT-TYPE-NAME]"
       parameters:
         - parameter: 
             name: "unit"
             dt: "string"
             value: "[unit.value]"
         - parameter: 
             name: "property"
             dt: "string"
             value: "[property.value]"
     test:
       type: "[TEST-TYPE-NAME]"
       parameters:
         - parameter:
             name: "value"
             dt: "string"
             value: "[value.value]"
         - parameter:
             name: "data_type"
             dt: "string"
             value: "[data_type.value]"
         - parameter:
             name: "unit_operation"
             dt: "string"
             value: "[unit_operation.value]"
         - parameter:
             name: "dependency"
             dt: "string"
             value: "[dependency.value]"

JSON
^^^^

::

   {
     "artifact-expression": {
       "artifact-unique-id": "[ARTIFACT-OVAL-ID]",
       "artifact-title": "[RECOMMENDATION-TITLE]",
       "artifact": {
         "type": "linux.systemd_unit_property_v1",
         "parameters": [
           {
             "parameter": {
               "name": "unit",
               "type": "string",
               "value": "[unit.value]"
             }
           },
           {
             "parameter": {
               "name": "property",
               "type": "string",
               "value": "[property.value]"
             }
           }
         ]
       },
       "test": {
         "type": "[TEST-TYPE-NAME]",
         "parameters": [
           {
             "parameter": {
               "name": "value",
               "type": "string",
               "value": "[value.value]"
             }
           },
           {
             "parameter": {
               "name": "data_type",
               "type": "string",
               "value": "[data_type.value]"
             }
           },
           {
             "parameter": {
               "name": "unit_operation",
               "type": "string",
               "value": "[unit_operation.value]"
             }
           },
           {
             "parameter": {
               "name": "dependency",
               "type": "string",
               "value": "[dependency.value]"
             }
           }
         ]
       }
     }
   }
